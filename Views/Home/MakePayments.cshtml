@model Mtama.Models.PaymentModel
@{
    ViewData["Title"] = "Authorise Payments";
}
<div class=" col-lg-12 col-md-12">
    <div class="col-md-1">

    </div>
    <div class="col-md-10">
        <div>
            <form asp-route-returnUrl="@ViewData["ReturnUrl"]" method="post" id="frmMakePayments">
                <div class="form-group col-md-12">
                    <label asp-for="SenderWallet">Sender Wallet</label>
                    <input id="txtWalletAddress" asp-for="SenderWallet" readonly class="form-control" />
                </div>
                <div class="form-group col-md-6">
                    <label>Receiver Name</label>
                    <input id="txtReceiverName" required class="form-control" />
                </div>
                <div class="form-group col-md-6">
                    <label asp-for="ReceiverWallet">Receiver Wallet</label>
                    <input id="txtReceiverWallet" asp-for="ReceiverWallet" required  class="form-control" />
                </div>
                <div class="form-group col-md-6">
                    <label asp-for="AmountInFiat">Amount In Kenyan Shilling</label>
                    <input asp-for="AmountInFiat" type="number" onchange="GetEtherValue()" required placeholder="Amount In Kenyan  (Minimum = 100)" class="form-control" value="" />
                    <span asp-validation-for="AmountInFiat" class="text-danger"></span>
                </div>
                <div class="form-group col-md-6">
                    <label asp-for="AmountInEther">Amount In Ether</label>
                    <input asp-for="AmountInEther" type="number" readonly required placeholder="Amount In Kenyan (1ETH = 65000 KSH)" value="" class="form-control" />
                    <span asp-validation-for="AmountInEther" class="text-danger"></span>
                </div>
                <div class="form-group col-md-12">
                    <label asp-for="TxNote">Transaction Note</label>
                    <textarea asp-for="TxNote" rows="6" cols="75" required placeholder="Description about the transaction" class="form-control"></textarea>
                </div>
                <div class="col-md-12">
                    <button id="btnSend" onclick="App.startEscrow(); return false;" class="btn btn-link btn-default form-control text-center" style="background-color:darkorange; color:white">Authorise Payment</button>
                </div>

                <div>
                    @Html.HiddenFor(h => h.TxHash, new { @class = "clsTxHash" })
                    @Html.HiddenFor(h => h.TxGuid, new { @class = "clsTxGuid" })
                </div>
                @{if (!String.IsNullOrEmpty("" + ViewData["Error"]))
                    {
                        <label style="color:red">@ViewData["Error"]</label>
                    }
                }
            </form>

        </div>
    </div>
    
    <div class="col-md-2"></div>
    
</div>
<div class="loading-overlay">
    <div class="spin-loader"></div>
</div>
<script type="text/javascript">


    async function GetEtherValue() {

        var value = $('#AmountInFiat').val();
        var price = parseInt(value);
        console.log("This ran");
        let response = await fetch('https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=KES');
        let data = await response.json();
        var price = price / data.KES;

        console.log(price);

        $("#AmountInEther").val(price);
    }


    $(document).ready(function () {

      


        App.initMetamask();
        @*$('#txtReceiverName').autocomplete({
            source: '@Url.Action("SearchUser", "Home")'
        });*@
        $('#txtReceiverName').focusout(function(){
            var value = $(this).val();
            var arr = value.split("(");
            var v = arr[1];
            v = v.replace(')', '');
            $('#txtReceiverWallet').val(v);
        });

        //$("#AmountInFiat").focusout(async function () {
        //    var value = $(this).val();
        //    var price = parseInt(value);
        //    console.log("This ran");
        //    let response = await fetch('https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=KES');
        //    let data = await response.json();
        //    var price = price / data.KES;
            
        //    console.log(price);

        //    $("#AmountInEther").val(price);
        //});



        //.on('autocompleteresponse autocompleteselect', function (e, ui) {
        //    var t = $(this),
        //        wal = $('#txtReceiverWallet'),
        //        label = (e.type == 'autocompleteresponse' ? ui.content[0].label : ui.item.label),
        //        value = (e.type == 'autocompleteresponse' ? ui.content[0].value : ui.item.value);
            
        //    var arr = value.split("(");
        //    var v = arr[1];
        //    v = v.replace(')', '');
        //    wal.val(v);
        //    return false;
        //});
    });    
</script>